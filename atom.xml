<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiao Hei&#39;Blog</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lishengqi.gitee.io/"/>
  <updated>2020-08-14T10:31:38.471Z</updated>
  <id>http://lishengqi.gitee.io/</id>
  
  <author>
    <name>小黑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>引用&quot;闪烁之狐&quot;博客主题hexo-theme-matery</title>
    <link href="http://lishengqi.gitee.io/posts/12338.html"/>
    <id>http://lishengqi.gitee.io/posts/12338.html</id>
    <published>2020-08-12T12:14:39.000Z</published>
    <updated>2020-08-14T10:31:38.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参照<strong>闪烁之狐</strong> <a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a>。为hexo博客引入matery主题。该博客仅表达个人看法</p></blockquote><p><font color="" face="" size="5"><strong>为何使用”闪烁之狐”博客主题，原因有三 : </strong></font></p><h4 id="1-“闪烁之狐”主题样式丰富"><a href="#1-“闪烁之狐”主题样式丰富" class="headerlink" title="1. “闪烁之狐”主题样式丰富"></a><strong>1. “闪烁之狐”主题样式丰富</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最开始使用的next主题。在配置next主题的过程中，可能是因为第一次的原因，可谓是一步一个坑。各大博客网站上关于搭建信息更是层出不穷，很大的原因是mac配置next主题的材料很少。经过了三天的努力，才仅仅打出来这样的样式</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghoazzkzalj31ki0u0h02.jpg" style="box-shadow: 1px 1px 10px rgba(0,0,0,.5)"><p>​        现在使用的主题。</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghob21kgo1j31kd0u0x6r.jpg" style="box-shadow: 1px 1px 10px rgba(0,0,0,.5)"><h4 id="2-“闪烁之狐”主题配置效果丰富"><a href="#2-“闪烁之狐”主题配置效果丰富" class="headerlink" title="2. “闪烁之狐”主题配置效果丰富"></a><strong>2. “闪烁之狐”主题配置效果丰富</strong></h4><p><a href="https://theme-next.iissnan.com/theme-settings.html">next主题配置文档</a></p><p><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐配置文档</a></p><p>​       举一个例子。如”闪烁之狐”主题，闪烁之狐的主题兼容Gitalk， gitment， disqus， livere， valine多个评论模块的配置。同时博客主题的背景根据配置，每天都有不一样的背景。当然还有我最喜欢的就是，每写一个博客之后，都想要一个好看漂亮的封面，这样自己看的也很舒服。你可以自定义设定背景，同样也可以使用默认的图片做博客的封面。</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghobqvjb9kj31ke0u01ky.jpg" style="box-shadow: 1px 1px 10px rgba(0,0,0,.5)"><h4 id="3-偏向新手搭建个人博客"><a href="#3-偏向新手搭建个人博客" class="headerlink" title="3. 偏向新手搭建个人博客"></a><strong>3. 偏向新手搭建个人博客</strong></h4><p>​        对我这种后端的开发人员第一次搭建个人博客，很友好，在使用”闪烁之狐”的博客主题过程中，更偏向博客配色，博客图片使用等方面。配色方面的话，可以去 <strong><a href="http://color.oulu.me/">一个集合180种免费的线性渐变网站</a></strong> 查看配色方案。说到这，如果喜欢<strong>闪烁之狐</strong>大佬的主题的话，马上心动吧</p><blockquote><p>以上内容单纯个人看法，不喜勿喷。如果我的博客帮到了你，我本人也很开心。如果你搭建博客过程中碰到许多的坑，或者说书面文档对你帮助不是很大。别灰心，推荐你去B站上看<a href="https://www.bilibili.com/video/av44544186">手把手教你从0开始搭建自己的个人博客</a> B站观看人数最多的搭建博客教程。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参照&lt;strong&gt;闪烁之狐&lt;/strong&gt; &lt;a href=&quot;http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-sha
      
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://lishengqi.gitee.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="闪烁之狐hexo-theme-matery" scheme="http://lishengqi.gitee.io/tags/%E9%97%AA%E7%83%81%E4%B9%8B%E7%8B%90hexo-theme-matery/"/>
    
  </entry>
  
  <entry>
    <title>抽象类和接口</title>
    <link href="http://lishengqi.gitee.io/posts/45299.html"/>
    <id>http://lishengqi.gitee.io/posts/45299.html</id>
    <published>2020-08-11T16:39:45.000Z</published>
    <updated>2020-08-14T15:43:24.830Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：当面试官在问到我这块知识点的时候，我整个人脑子只是冒出来interface和abstract这两个关键字。仅说出了接口和抽象类各自的特征，但是二者之间的异同点答得不是很好，这块知识点老是记不住，还是需要通过代码来了解比较直观。</p></blockquote><p><a href="https://www.kancloud.cn/wizardforcel/w3school-java/93723">接口和抽象类的概念以及定义</a> </p><h3 id="interface-：接口"><a href="#interface-：接口" class="headerlink" title="interface ：接口"></a>interface ：接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接口定义对象默认使用public static final进行定义     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TEST <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TODO 显示Public static final是多余的</span>    <span class="token comment" spellcheck="true">/**     * 接口的方法默认使用public abstarct 进行定义，并且接口的方法不能有方法体     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TODO 显示Public abstract是多余的</span>    <span class="token comment" spellcheck="true">/**     * java8 接口能定义default方法的缺省的默认方法体     * java9 接口能定义抽象方法     * @return     */</span>    <span class="token keyword">default</span> <span class="token keyword">long</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO 显示Public是多余的</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="abstract-：抽象"><a href="#abstract-：抽象" class="headerlink" title="abstract ：抽象"></a>abstract ：抽象</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String abs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO 无参和有参的构造器</span>    <span class="token keyword">public</span> <span class="token function">AbstractTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AbstractTest</span><span class="token punctuation">(</span>String abc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>abs <span class="token operator">=</span> abc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// TODO Get/Set方法</span>    <span class="token keyword">public</span> String <span class="token function">getAbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> abs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAbs</span><span class="token punctuation">(</span>String abs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>abs <span class="token operator">=</span> abs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"AbstractTest{"</span> <span class="token operator">+</span>                <span class="token string">"abs='"</span> <span class="token operator">+</span> abs <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// TODO Extension methods can only be used within an interface 扩展方法只能在接口内使用</span>    <span class="token comment" spellcheck="true">// default void getString(){}  // 提示错误</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TODO 抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// TODO main方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>学习过程中，可以针对类和抽象类之间的异同点，抽象类和接口之间的异同点来理解，这种方式能直观的看到三者之间的关系。</strong></p><table><thead><tr><th></th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>成员变量</td><td>能定义成员变量</td><td>接口的变量默认使用public static final定义。使得该变量不能发生修改，接口不能定义成员变量</td></tr><tr><td>构造器</td><td>能定义构造器</td><td>接口不能定义构造器</td></tr><tr><td>普通方法</td><td>能定义普通方法</td><td>接口中的方法默认使用public abstract修饰</td></tr><tr><td>静态方法</td><td>能定义静态方法</td><td>接口能定义静态方法。但静态方法不能抽象[1]</td></tr><tr><td>抽象方法</td><td>能定义抽象方法，必须使用public abstract修饰该方法</td><td>接口中定义的方法除静态方法和default修饰的方法都是抽象方法(jdk1.8)。</td></tr><tr><td>继承/实现</td><td>能实现单继承，多实现</td><td>多实现</td></tr><tr><td>定义default方法</td><td>仅能在接口中定义</td><td></td></tr><tr><td>定义main方法</td><td>能定义main方法</td><td>不能定义main方法</td></tr><tr><td>创建实例</td><td>AbstractTest absTest = new AbstractTest();</td><td>// 使用匿名类的方式InterfaceTest test = new InterfaceTest(){   @Override   // TODO 重写接口中的方法}// 使用多态的方式，将接口的实现类的实例指向接口对象也能创建接口实例InterfaceTest test = new InterfaceTestImpl();</td></tr></tbody></table><p><strong>[1]</strong>：针对静态方法在接口中不能抽象的个人理解 -&gt; 静态方法本身存在是需要方法体的，并且可以通过(类名.方法名)去调用。而抽象方法不存在方法体。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>个人认为：接口和抽象类的应用场景跟接口和抽象类的异同点相关的。</p><p><strong>接口</strong>：接口可以具体的阐述某种对象的行为/特征。举个例子：某个对象的增删改查的业务逻辑操作，可以使用接口去实现这些操作。大多数情况下，实现一个接口的场景比较多。</p><p><strong>抽象</strong>类：抽象类则偏向多个对象的共性或者说是多个对象同时拥有或者具备的特征/行为。比如说，人类中存在一个work()的抽象方法，老师和学生这两个对象，都是属于人类。当老师和学生这两个对象去继承人类这个父类的时候。他们就要完成这个work()的实现。老师的work()主要是授课，而学生的work()主要是学习</p><p>上述仅为个人理解，理解有误的地方希望读者进行反馈，谢谢</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：当面试官在问到我这块知识点的时候，我整个人脑子只是冒出来interface和abstract这两个关键字。仅说出了接口和抽象类各自的特征，但是二者之间的异同点答得不是很好，这块知识点老是记不住，还是需要通过代码来了解比较直观。&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://lishengqi.gitee.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="抽象类" scheme="http://lishengqi.gitee.io/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
      <category term="接口" scheme="http://lishengqi.gitee.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>项目打包运行在后台</title>
    <link href="http://lishengqi.gitee.io/posts/63379.html"/>
    <id>http://lishengqi.gitee.io/posts/63379.html</id>
    <published>2020-08-08T08:45:41.000Z</published>
    <updated>2020-08-14T15:41:30.120Z</updated>
    
    <content type="html"><![CDATA[<ol><li>进入到项目的路径下，输入以下命令完成项目打包</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ mvn clean package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>打包好的项目默认在项目目录中的<code>target</code>文件夹中，</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gheuzmi1xsj30m607ygp5.jpg" alt=""></p><p>  <strong><code>target</code>中的<code>eureka-0.0.1-SNAPSHOT.jar</code>就是打包好的jar包。</strong></p><ol start="3"><li>使用java命令启动项目</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ java -jar target/eureka-0.0.1-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    程序启动如下图(可使用<code>ctrl+c</code>断开链接)：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghev4rm6icj30vo0p4qib.jpg" alt=""></p><ol start="4"><li>使用如下命令可以使得项目在后台中启动</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">nohup</span> java -jar target/eureka-0.0.1-SNAPSHOT.jar <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    会生成后台的进程号</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghev9on2n4j30v8030gn5.jpg" alt=""></p><p>​    使用以下命令可以查看这个进程的状态和信息</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> eureka //进程名字$ <span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> 25746 //进程标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    如需”杀死”该进程</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">kill</span> -9 25746 // 26349<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;进入到项目的路径下，输入以下命令完成项目打包&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mvn clean package&lt;span aria
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://lishengqi.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://lishengqi.gitee.io/tags/java/"/>
    
      <category term="linux" scheme="http://lishengqi.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>http学习</title>
    <link href="http://lishengqi.gitee.io/posts/64520.html"/>
    <id>http://lishengqi.gitee.io/posts/64520.html</id>
    <published>2020-08-08T08:42:08.000Z</published>
    <updated>2020-08-14T15:41:48.284Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HTTP-协议始于三十年多前蒂姆·伯纳斯-李的一篇论文；"><a href="#HTTP-协议始于三十年多前蒂姆·伯纳斯-李的一篇论文；" class="headerlink" title="HTTP 协议始于三十年多前蒂姆·伯纳斯 - 李的一篇论文；"></a>HTTP 协议始于三十年多前蒂姆·伯纳斯 - 李的一篇论文；</h4><p>论文中确立了三项关键技术</p><ul><li>URI：即统一资源标识符，作为互联网上资源的唯一身份；</li><li>HTML：即超文本标记语言，描述超文本文档；</li><li>HTTP：即超文本传输协议，用来传输超文本。</li></ul><h4 id="HTTP-0-9-是个简单的文本协议，只能获取文本资源；"><a href="#HTTP-0-9-是个简单的文本协议，只能获取文本资源；" class="headerlink" title="HTTP/0.9 是个简单的文本协议，只能获取文本资源；"></a>HTTP/0.9 是个简单的文本协议，只能获取文本资源；</h4><h4 id="HTTP-1-0-确立了大部分现在使用的技术，但它不是正式标准；"><a href="#HTTP-1-0-确立了大部分现在使用的技术，但它不是正式标准；" class="headerlink" title="HTTP/1.0 确立了大部分现在使用的技术，但它不是正式标准；"></a>HTTP/1.0 确立了大部分现在使用的技术，但它不是正式标准；</h4><ul><li>增加了 HEAD、POST 等新方法；</li><li>增加了响应状态码，标记可能的错误原因；</li><li>引入了协议版本号概念；</li><li>引入了 HTTP Header（头部）的概念，让 HTTP 处理请求和响应更加灵活；</li><li>传输的数据不再仅限于文本。</li></ul><h4 id="HTTP-1-1-是目前互联网上使用最广泛的协议，功能也非常完善；"><a href="#HTTP-1-1-是目前互联网上使用最广泛的协议，功能也非常完善；" class="headerlink" title="HTTP/1.1 是目前互联网上使用最广泛的协议，功能也非常完善；"></a>HTTP/1.1 是目前互联网上使用最广泛的协议，功能也非常完善；</h4><ul><li>增加了 PUT、DELETE 等新的方法；</li><li>增加了缓存管理和控制；</li><li>明确了连接管理，允许持久连接；</li><li>允许响应数据分块（chunked），利于传输大文件；</li><li>强制要求 Host 头，让互联网主机托管成为可能。</li></ul><h4 id="HTTP-2-基于-Google-的-SPDY-协议，注重性能改善，但还未普及；"><a href="#HTTP-2-基于-Google-的-SPDY-协议，注重性能改善，但还未普及；" class="headerlink" title="HTTP/2 基于 Google 的 SPDY 协议，注重性能改善，但还未普及；"></a>HTTP/2 基于 Google 的 SPDY 协议，注重性能改善，但还未普及；</h4><ul><li>二进制协议，不再是纯文本；</li><li>可发起多个请求，废弃了 1.1 里的管道；</li><li>使用专用算法压缩头部，减少数据传输量；</li><li>允许服务器主动向客户端推送数据；</li><li>增强了安全性，“事实上”要求加密通信。</li></ul><h4 id="HTTP-3-基于-Google-的-QUIC-协议，是将来的发展方向。"><a href="#HTTP-3-基于-Google-的-QUIC-协议，是将来的发展方向。" class="headerlink" title="HTTP/3 基于 Google 的 QUIC 协议，是将来的发展方向。"></a>HTTP/3 基于 Google 的 QUIC 协议，是将来的发展方向。</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HTTP-协议始于三十年多前蒂姆·伯纳斯-李的一篇论文；&quot;&gt;&lt;a href=&quot;#HTTP-协议始于三十年多前蒂姆·伯纳斯-李的一篇论文；&quot; class=&quot;headerlink&quot; title=&quot;HTTP 协议始于三十年多前蒂姆·伯纳斯 - 李的一篇论文；&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://lishengqi.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http协议" scheme="http://lishengqi.gitee.io/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用homebrew安装openResty</title>
    <link href="http://lishengqi.gitee.io/posts/14066.html"/>
    <id>http://lishengqi.gitee.io/posts/14066.html</id>
    <published>2020-08-08T08:41:58.000Z</published>
    <updated>2020-08-14T15:41:15.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p># 使用homebrew安装openResty，出现以下报错</p><p><strong>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</strong><br>Error: Failed to download resource “openresty-openssl111–patch”<br>Download failed: <a href="https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-1.1.1f-sess_set_get_cb_yield.patch">https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-1.1.1f-sess_set_get_cb_yield.patch</a></p></blockquote><h3 id="使用homebrew安装OpenResty"><a href="#使用homebrew安装OpenResty" class="headerlink" title="使用homebrew安装OpenResty"></a>使用homebrew安装OpenResty</h3><h4 id="安装OpenResty失败原因如下"><a href="#安装OpenResty失败原因如下" class="headerlink" title="安装OpenResty失败原因如下"></a>安装OpenResty失败原因如下</h4><p>错误代码如下，显示不能访问<code>raw.githubusercontent.com</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">curl: <span class="token punctuation">(</span>7<span class="token punctuation">)</span> Failed to connect to raw.githubusercontent.com port 443: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因如下：在访问<code>raw.githubusercontent.com</code>的时候，本地浏览器和系统都没有该网站的缓存。DNS解析该域名的过程如下</p><pre class="line-numbers language-bash"><code class="language-bash">本地浏览器缓存 -<span class="token operator">></span> 系统浏览器缓存 -<span class="token operator">></span> hosts文件 -<span class="token operator">></span> DNS系统<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过以上报错得知：系统下载OpenResty需要从<code>raw.githubusercontent.com</code>获取资源。但是我们访问DNS系统的过程中是存在问题的。安装失败</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>通过链接<code>raw.githubusercontent.com.ipaddress.com</code>获取网站的ip:<code>199.232.68.133</code></p><p>打开本地<code>hosts</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件下添加</p><pre class="line-numbers language-bash"><code class="language-bash">199.232.68.133   raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候，http在访问<code>raw.githubusercontent.com</code>的过程中就访问DNS，而是直接从hosts文件中获取到源站的资源。加快系统的访问速度。</p><p>以上问题是本人参照 <a href="[http://book.tangyefei.cn/master-http/_book/chapter1-7-%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAHTTP%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83.html](http://book.tangyefei.cn/master-http/_book/chapter1-7-自己动手搭建HTTP实验环境.html)">自己动手搭建HTTP实验环境</a> 遇到的问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;# 使用homebrew安装openResty，出现以下报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection 
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://lishengqi.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="homebrew" scheme="http://lishengqi.gitee.io/tags/homebrew/"/>
    
      <category term="openResty" scheme="http://lishengqi.gitee.io/tags/openResty/"/>
    
  </entry>
  
  <entry>
    <title>mac下安装maven</title>
    <link href="http://lishengqi.gitee.io/posts/59524.html"/>
    <id>http://lishengqi.gitee.io/posts/59524.html</id>
    <published>2020-08-08T08:41:36.000Z</published>
    <updated>2020-08-14T15:42:03.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在终端使用mvn -v显示zsh: command not found: mvn</p></blockquote><p>在<a href="https://maven.apache.org/download.cgi">maven官网</a>下载maven压缩包</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghj5c1q4mqj31qq0bc40r.jpg" alt=""></p><p>下载并解压到<code>/usr/local</code>文件夹下。检查maven的目录是否和下图一致</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghj5egpiayj316s0o8k3g.jpg" alt=""></p><p><strong>注：如果maven文件不存在<code>bin</code>目录，会导致下边环境变量配置成功之后，还是不能使用maven的终端命令mvn。</strong></p><ul><li><code>bin</code>包含有操作maven的指令和命令的</li></ul><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>打开用户下配置环境变量的文件<code>.bash_profile</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">vi</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下配置存放至文件中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> MAVEN_HOME<span class="token operator">=</span>/usr/local/apache-maven-3.6.3<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">${MAVEN_HOME}</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存成功后，在执行如下配置，让配置生效</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mac用户配置类似mysql或者java的环境变量都可参照<strong>配置环境变量</strong>这个模块</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在终端使用mvn -v显示zsh: command not found: mvn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://maven.apache.org/download.cgi&quot;&gt;maven官网&lt;/a&gt;下载
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://lishengqi.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://lishengqi.gitee.io/tags/maven/"/>
    
      <category term="Mac" scheme="http://lishengqi.gitee.io/tags/Mac/"/>
    
      <category term="环境变量" scheme="http://lishengqi.gitee.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac下配置NexT主题</title>
    <link href="http://lishengqi.gitee.io/posts/63598.html"/>
    <id>http://lishengqi.gitee.io/posts/63598.html</id>
    <published>2020-08-02T15:03:39.000Z</published>
    <updated>2020-08-14T10:32:35.139Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;详细内容请看 <strong><a href="https://theme-next.iissnan.com/">NexT官网文档</a></strong></p><ul><li><p><strong>&lt;blog name&gt;/_config.yml：<font color="Lightblue">站点配置文件</font></strong></p></li><li><p><strong>themes/next/_config.yml：<font color="pink">主题配置文件</font></strong></p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><table><tbody><tr><td bgcolor="lightblue"><strong>注意⚠️：查看NexT的Github仓库 <a href="https://github.com/theme-next/hexo-theme-next">hexo-themes-next</a> 确定NexT主题的克隆地址是否正确。</strong></td></tr></tbody></table><ul><li><strong>使用Git安装</strong>  将NexT主题克隆到themes/next中</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next.git themes/next <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>修改站点配置文件</strong> 注意next内容前面需要使用空格隔开，hexo可能会识别不到</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>设置更多精彩样式请看 <a href="https://jrbcode.gitee.io/posts/63c4b34f.html">CodeHeap-快速使用Hexo搭建个人博客</a></strong> </p><ul><li>启动项目</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看  <strong><a href="http://localhost:4000/">localhost:4000</a></strong>  </li></ul><h3 id="NexT主题优化"><a href="#NexT主题优化" class="headerlink" title="NexT主题优化"></a>NexT主题优化</h3><h4 id="设置背景"><a href="#设置背景" class="headerlink" title="设置背景"></a>设置背景</h4><ul><li>在主题配置文件中搜索<code>custom_file_path</code>，在<code>source/_data</code>下创建<code>styles.styl</code>。添加以下代码</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">// 添加背景图片body </span><span class="token punctuation">{</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(/images/images.jpeg)</span><span class="token punctuation">;</span>//自己喜欢的图片地址      <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>      <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>      <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//博客内容透明化//文章内容的透明度设置<span class="token class">.content-wrap</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.85</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//侧边框的透明度设置<span class="token class">.sidebar</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.85</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//菜单栏的透明度设置<span class="token class">.header-inner</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//搜索框（local-search）的透明度设置<span class="token class">.popup</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.85</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.post</span> </span><span class="token punctuation">{</span>   <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>   <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><ul><li>在主题配置文件中搜索<code>avatar</code></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">avatar</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.gif  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># 如果为true，则图片为正方形，头像将显示为圆形。为长方形，头像显示椭圆</span>  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># 如果为true，则头像将随着光标旋转。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置评论"><a href="#配置评论" class="headerlink" title="配置评论"></a>配置评论</h4><ol><li>配置Hexo NexT Utteranc <strong>详细内容请查看 <a href="https://github.com/theme-next/hexo-next-utteranc">Hexo NexT Utteranc配置</a></strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> theme-next/hexo-next-utteranc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装成功后，在主题配置文件中配置，根据<code>username/username.github.io</code>配置repo，其他可按默认配置</li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Demo: https://utteranc.es/ http://trumandu.github.io/about/ </span><span class="token key atrule">utteranc</span><span class="token punctuation">:</span>   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#Github repo such as :TrumanDu/comments #根据username/username/github.io配置 </span>  <span class="token key atrule">pathname</span><span class="token punctuation">:</span> pathname <span class="token comment" spellcheck="true"># theme: github-light,github-dark,github-dark-orange </span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>light   <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//utteranc.es/client.js   <span class="token comment" spellcheck="true"># If you want to modify priority, please config in **hexo** </span>  <span class="token comment" spellcheck="true">#priority:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装utterances。打开 <a href="https://github.com/apps/utterances">utterances</a>，点击Install，<code>Select repositories</code>选择自己搭建博客的仓库。</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghek7f2842j31dg0mu7rg.jpg" alt=""></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><strong>配置更详细更好看的NexT主题请查看 <a href="https://jrbcode.gitee.io/posts/63c4b34f.html">CodeHeap-快速使用Hexo搭建个人博客-主题美化</a></strong> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;详细内容请看 &lt;strong&gt;&lt;a href=&quot;https://theme-next.iissnan.com/&quot;&gt;NexT官网文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://lishengqi.gitee.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Mac" scheme="http://lishengqi.gitee.io/tags/Mac/"/>
    
      <category term="NexT" scheme="http://lishengqi.gitee.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建个人博客</title>
    <link href="http://lishengqi.gitee.io/posts/42500.html"/>
    <id>http://lishengqi.gitee.io/posts/42500.html</id>
    <published>2020-08-02T06:08:09.861Z</published>
    <updated>2020-08-14T15:42:10.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言：最近自己用markdown写了一些博客，想着把自己写的东西也放在Github上。然后……自己的博客搭建了三天才完成。这过程也是蛮丰富的，一步一个脚印，一步一个坑啊。我把自己遇到的比较烦人的问题记下来，方便自己也方便大家</strong> </p></blockquote><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li><p><strong>Git</strong></p><p>查看电脑是否安装Git。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示以下代码证明系统上安装Git</p><pre class="line-numbers language-bash"><code class="language-bash">用法：git <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span> <span class="token punctuation">[</span>-C <span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-c <span class="token operator">&lt;</span>name<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token punctuation">]</span>           <span class="token punctuation">[</span>--exec-path<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--html-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>--man-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>--info-path<span class="token punctuation">]</span>           <span class="token punctuation">[</span>-p <span class="token operator">|</span> --paginate <span class="token operator">|</span> -P <span class="token operator">|</span> --no-pager<span class="token punctuation">]</span> <span class="token punctuation">[</span>--no-replace-objects<span class="token punctuation">]</span> <span class="token punctuation">[</span>--bare<span class="token punctuation">]</span>           <span class="token punctuation">[</span>--git-dir<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--work-tree<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--namespace<span class="token operator">=</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>           <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过homebrew安装Git，如未安装homebrew，安装命令如下</p><pre class="line-numbers language-bash"><code class="language-bash">$ /usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装Git</p><pre class="line-numbers language-bash"><code class="language-bash">$ brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>Node.js</strong></p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ brew <span class="token function">link</span> node$ brew uninstall node$ brew <span class="token function">install</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证Node是否安装成功：</p><pre class="line-numbers language-bash"><code class="language-bash">$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功，显示node版本号</p></li></ol><img src="https://s1.ax1x.com/2020/08/03/adeqP0.jpg" style="width:738px;margin-left:2.2em"><h3 id="新建一个Github仓库"><a href="#新建一个Github仓库" class="headerlink" title="新建一个Github仓库"></a>新建一个Github仓库</h3><ol><li>如下图在Github上创建</li></ol><img src="https://s1.ax1x.com/2020/08/03/adMDAJ.jpg" style="width:738px;margin-left:2em;box-shadow: 1px 1px 10px rgba(0,0,0,.5)"><ol start="2"><li><p>创建ssh key，配置git</p><p>设置user.name和email(每次提交代码都会记录)</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Github账户"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"Github注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用终端命令创建ssh key。创建过成功「三次回车」</p><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"Github注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建成功之后，会/Users/“username”/.ssh下生成id_rsa.pub。复制id_rsa.pub文件的代码。</p><p>根据：Github用户下 -&gt; Settings -&gt; SSH and GPG keys -&gt; 点击New SSH key。粘贴至key中</p></li></ol><img src="https://s1.ax1x.com/2020/08/03/ad8VQ1.jpg" style="width:738px;margin-left:2em;box-shadow: 1px 1px 10px rgba(0,0,0,.5)"><h4 id="访问不到username-github-io"><a href="#访问不到username-github-io" class="headerlink" title="访问不到username.github.io"></a>访问不到username.github.io</h4><p>​    使用 <strong><a href="https://app.clash.cat/#">凡云</a></strong> 进行访问。具体操作需要进行注册登录，感兴趣的可以试试看。根据网站中的 <strong>"下载和教程"</strong> 进行安全上网</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li><p>详细内容请查看<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><p><strong>安装Hexo</strong></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>初始化项目</strong></p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo init blog$ <span class="token function">cd</span> blog$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>启动项目</strong></p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<a href="http://localhost:4000/">localhost:4000</a>查看。显示网页则本地博客搭建</p><p>在站点配置文件 <code>……/blog/_config.yml</code>中搜索 <code>deplay</code>。将这部分的代码改成以下</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>username/username.github.io.git //使用ssh方式访问Git仓库  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>部署项目</strong></p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>部署成功，访问<code>username.github.io</code>就能查看本地项目的博客样式</strong></p><img src="https://s1.ax1x.com/2020/08/03/ad68UJ.jpg" style="width:738px;margin-left:1px;box-shadow: 1px 1px 10px rgba(0,0,0,.5)"></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://jrbcode.gitee.io/posts/63c4b34f.html">CodeHeap-快速使用Hexo搭建个人博客</a> 搭建过程很细节，样式涉及比较多，也很丰富</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言：最近自己用markdown写了一些博客，想着把自己写的东西也放在Github上。然后……自己的博客搭建了三天才完成。这过程也是蛮丰富的，一步一个脚印，一步一个坑啊。我把自己遇到的比较烦人的问题记下来，方便自己也方便大家&lt;/st
      
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://lishengqi.gitee.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Mac" scheme="http://lishengqi.gitee.io/tags/Mac/"/>
    
      <category term="Hexo" scheme="http://lishengqi.gitee.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
